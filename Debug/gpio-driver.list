
gpio-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000878  08000878  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000878  08000878  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000878  08000878  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000878  08000878  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000878  08000878  00010878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800087c  0800087c  0001087c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000884  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000884  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001493  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003c7  00000000  00000000  000214c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c8  00000000  00000000  00021890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  00021958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001f38  00000000  00000000  000219e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000f9f  00000000  00000000  00023920  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008881  00000000  00000000  000248bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002d140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000208  00000000  00000000  0002d1bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000860 	.word	0x08000860

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000860 	.word	0x08000860

08000204 <main>:
 */
#include "stm32f4xx.h"
#include "main.h"

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af02      	add	r7, sp, #8
	GPIO_clock_control(GPIOA_ADDR, CLK_SET);
 800020a:	2100      	movs	r1, #0
 800020c:	480a      	ldr	r0, [pc, #40]	; (8000238 <main+0x34>)
 800020e:	f000 f9af 	bl	8000570 <GPIO_clock_control>
	GPIO_regdef_t *port = gpio_config(GPIOA_ADDR, GPIO_MODE_OP , GPIO_PIN_5, GPIO_OP_PP, GPIO_NO_PULLUPDOWN ,GPIO_MED_SPEED);
 8000212:	2301      	movs	r3, #1
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	2300      	movs	r3, #0
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2300      	movs	r3, #0
 800021c:	2205      	movs	r2, #5
 800021e:	2101      	movs	r1, #1
 8000220:	4805      	ldr	r0, [pc, #20]	; (8000238 <main+0x34>)
 8000222:	f000 fab6 	bl	8000792 <gpio_config>
 8000226:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GPIO_toggle_pin(port, GPIO_PIN_5);
 8000228:	2105      	movs	r1, #5
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 fa86 	bl	800073c <GPIO_toggle_pin>
		delay(50);
 8000230:	2032      	movs	r0, #50	; 0x32
 8000232:	f000 fad6 	bl	80007e2 <delay>
		GPIO_toggle_pin(port, GPIO_PIN_5);
 8000236:	e7f7      	b.n	8000228 <main+0x24>
 8000238:	40020000 	.word	0x40020000

0800023c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000240:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000244:	480c      	ldr	r0, [pc, #48]	; (8000278 <LoopForever+0x6>)
  ldr r1, =_edata
 8000246:	490d      	ldr	r1, [pc, #52]	; (800027c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000248:	4a0d      	ldr	r2, [pc, #52]	; (8000280 <LoopForever+0xe>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800024c:	e002      	b.n	8000254 <LoopCopyDataInit>

0800024e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000252:	3304      	adds	r3, #4

08000254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000258:	d3f9      	bcc.n	800024e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800025c:	4c0a      	ldr	r4, [pc, #40]	; (8000288 <LoopForever+0x16>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000260:	e001      	b.n	8000266 <LoopFillZerobss>

08000262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000264:	3204      	adds	r2, #4

08000266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000268:	d3fb      	bcc.n	8000262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026a:	f000 fad5 	bl	8000818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026e:	f7ff ffc9 	bl	8000204 <main>

08000272 <LoopForever>:

LoopForever:
    b LoopForever
 8000272:	e7fe      	b.n	8000272 <LoopForever>
  ldr   r0, =_estack
 8000274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800027c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000280:	08000880 	.word	0x08000880
  ldr r2, =_sbss
 8000284:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000288:	20000020 	.word	0x20000020

0800028c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800028c:	e7fe      	b.n	800028c <ADC_IRQHandler>
	...

08000290 <GPIO_init>:
#include "stm32f4xx.h"
#include "LL_rcc.h"
#include "LL_gpio.h"

void GPIO_init(GPIO_handle_t *pGPIOx)
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	// configure the mode
	uint32_t regtemp = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
	uint8_t mode = pGPIOx->GPIOpinconfig.GPIO_mode;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	795b      	ldrb	r3, [r3, #5]
 80002a0:	72fb      	strb	r3, [r7, #11]
	uint8_t alterpin = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	72bb      	strb	r3, [r7, #10]
	switch(mode)
 80002a6:	7afb      	ldrb	r3, [r7, #11]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	f200 80d7 	bhi.w	800045c <GPIO_init+0x1cc>
 80002ae:	a201      	add	r2, pc, #4	; (adr r2, 80002b4 <GPIO_init+0x24>)
 80002b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b4:	08000387 	.word	0x08000387
 80002b8:	080002c5 	.word	0x080002c5
 80002bc:	080003bd 	.word	0x080003bd
 80002c0:	0800045d 	.word	0x0800045d
	{
		case GPIO_MODE_OP:
			regtemp =  GPIO_MODE_OP << (2 * pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	791b      	ldrb	r3, [r3, #4]
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	2201      	movs	r2, #1
 80002cc:	fa02 f303 	lsl.w	r3, r2, r3
 80002d0:	60fb      	str	r3, [r7, #12]
			pGPIOx->pGPIOaddrx->MODER &= ~(0x3 << pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	791b      	ldrb	r3, [r3, #4]
 80002dc:	4619      	mov	r1, r3
 80002de:	2303      	movs	r3, #3
 80002e0:	408b      	lsls	r3, r1
 80002e2:	43db      	mvns	r3, r3
 80002e4:	4619      	mov	r1, r3
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	400a      	ands	r2, r1
 80002ec:	601a      	str	r2, [r3, #0]
			pGPIOx->pGPIOaddrx->MODER |= regtemp;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	6819      	ldr	r1, [r3, #0]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	430a      	orrs	r2, r1
 80002fc:	601a      	str	r2, [r3, #0]
			regtemp = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
			// configure the mode of operation
			if(pGPIOx->GPIOpinconfig.GPIO_pinoptype == GPIO_OP_PP)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	79db      	ldrb	r3, [r3, #7]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d119      	bne.n	800033e <GPIO_init+0xae>
			{
				regtemp = GPIO_OP_PP << (pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
				pGPIOx->pGPIOaddrx->OTYPER &= ~(0x3 << pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	685a      	ldr	r2, [r3, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	791b      	ldrb	r3, [r3, #4]
 8000318:	4619      	mov	r1, r3
 800031a:	2303      	movs	r3, #3
 800031c:	408b      	lsls	r3, r1
 800031e:	43db      	mvns	r3, r3
 8000320:	4619      	mov	r1, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	400a      	ands	r2, r1
 8000328:	605a      	str	r2, [r3, #4]
				pGPIOx->pGPIOaddrx->OTYPER |= regtemp;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	6859      	ldr	r1, [r3, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	430a      	orrs	r2, r1
 8000338:	605a      	str	r2, [r3, #4]
				regtemp = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
			}
			if(pGPIOx->GPIOpinconfig.GPIO_pinoptype == GPIO_OP_DR)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	79db      	ldrb	r3, [r3, #7]
 8000342:	2b01      	cmp	r3, #1
 8000344:	f040 8087 	bne.w	8000456 <GPIO_init+0x1c6>
			{
				regtemp = GPIO_OP_DR << (pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	791b      	ldrb	r3, [r3, #4]
 800034c:	461a      	mov	r2, r3
 800034e:	2301      	movs	r3, #1
 8000350:	4093      	lsls	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]
				pGPIOx->pGPIOaddrx->OTYPER &= ~(0x3 << pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	685a      	ldr	r2, [r3, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	791b      	ldrb	r3, [r3, #4]
 800035e:	4619      	mov	r1, r3
 8000360:	2303      	movs	r3, #3
 8000362:	408b      	lsls	r3, r1
 8000364:	43db      	mvns	r3, r3
 8000366:	4619      	mov	r1, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	400a      	ands	r2, r1
 800036e:	605a      	str	r2, [r3, #4]
				pGPIOx->pGPIOaddrx->OTYPER |= regtemp;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	6859      	ldr	r1, [r3, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	68fa      	ldr	r2, [r7, #12]
 800037c:	430a      	orrs	r2, r1
 800037e:	605a      	str	r2, [r3, #4]
				regtemp = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
			}
			break;
 8000384:	e067      	b.n	8000456 <GPIO_init+0x1c6>

		case GPIO_MODE_IN:
			// read mode
			regtemp =  GPIO_MODE_IN << (2 * pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
			pGPIOx->pGPIOaddrx->OTYPER &= ~(0x3 << pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	685a      	ldr	r2, [r3, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	791b      	ldrb	r3, [r3, #4]
 8000394:	4619      	mov	r1, r3
 8000396:	2303      	movs	r3, #3
 8000398:	408b      	lsls	r3, r1
 800039a:	43db      	mvns	r3, r3
 800039c:	4619      	mov	r1, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	400a      	ands	r2, r1
 80003a4:	605a      	str	r2, [r3, #4]
			pGPIOx->pGPIOaddrx->MODER |= regtemp;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6819      	ldr	r1, [r3, #0]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	430a      	orrs	r2, r1
 80003b4:	601a      	str	r2, [r3, #0]
			regtemp = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
			break;
 80003ba:	e04f      	b.n	800045c <GPIO_init+0x1cc>

		case GPIO_MODE_ALT:
			// alernative functionality
			alterpin = pGPIOx->GPIOpinconfig.GPIO_pinnumber / 8;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	791b      	ldrb	r3, [r3, #4]
 80003c0:	08db      	lsrs	r3, r3, #3
 80003c2:	72bb      	strb	r3, [r7, #10]
			gpio_alt_fun gpio_alt = pGPIOx->GPIOpinconfig.GPIO_pinaltfunction;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	7a5b      	ldrb	r3, [r3, #9]
 80003c8:	727b      	strb	r3, [r7, #9]
			if(alterpin == 0)
 80003ca:	7abb      	ldrb	r3, [r7, #10]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d11f      	bne.n	8000410 <GPIO_init+0x180>
			{
				regtemp = gpio_alt << (4 * (pGPIOx->GPIOpinconfig.GPIO_pinnumber % 8));
 80003d0:	7a7a      	ldrb	r2, [r7, #9]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	791b      	ldrb	r3, [r3, #4]
 80003d6:	f003 0307 	and.w	r3, r3, #7
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	fa02 f303 	lsl.w	r3, r2, r3
 80003e0:	60fb      	str	r3, [r7, #12]
				pGPIOx->pGPIOaddrx->AFRL &= ~(0x3 << pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	6a1a      	ldr	r2, [r3, #32]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	4619      	mov	r1, r3
 80003ee:	2303      	movs	r3, #3
 80003f0:	408b      	lsls	r3, r1
 80003f2:	43db      	mvns	r3, r3
 80003f4:	4619      	mov	r1, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	400a      	ands	r2, r1
 80003fc:	621a      	str	r2, [r3, #32]
				pGPIOx->pGPIOaddrx->AFRL |= regtemp;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	6a19      	ldr	r1, [r3, #32]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	430a      	orrs	r2, r1
 800040c:	621a      	str	r2, [r3, #32]
			{
				regtemp = gpio_alt << (4 * (pGPIOx->GPIOpinconfig.GPIO_pinnumber % 8));
				pGPIOx->pGPIOaddrx->AFRH &= ~(0x3 << pGPIOx->GPIOpinconfig.GPIO_pinnumber);
				pGPIOx->pGPIOaddrx->AFRH |= regtemp;
			}
			break;
 800040e:	e024      	b.n	800045a <GPIO_init+0x1ca>
			else if(alterpin == 1)
 8000410:	7abb      	ldrb	r3, [r7, #10]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d121      	bne.n	800045a <GPIO_init+0x1ca>
				regtemp = gpio_alt << (4 * (pGPIOx->GPIOpinconfig.GPIO_pinnumber % 8));
 8000416:	7a7a      	ldrb	r2, [r7, #9]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	f003 0307 	and.w	r3, r3, #7
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	fa02 f303 	lsl.w	r3, r2, r3
 8000426:	60fb      	str	r3, [r7, #12]
				pGPIOx->pGPIOaddrx->AFRH &= ~(0x3 << pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	4619      	mov	r1, r3
 8000434:	2303      	movs	r3, #3
 8000436:	408b      	lsls	r3, r1
 8000438:	43db      	mvns	r3, r3
 800043a:	4619      	mov	r1, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	400a      	ands	r2, r1
 8000442:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOx->pGPIOaddrx->AFRH |= regtemp;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	430a      	orrs	r2, r1
 8000452:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8000454:	e001      	b.n	800045a <GPIO_init+0x1ca>
			break;
 8000456:	bf00      	nop
 8000458:	e000      	b.n	800045c <GPIO_init+0x1cc>
			break;
 800045a:	bf00      	nop
		case GPIO_MODE_ANG:
			// need to write
			break;
	}
	// configure the speed
	uint8_t speed = pGPIOx->GPIOpinconfig.GPIO_pinspeed;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	799b      	ldrb	r3, [r3, #6]
 8000460:	723b      	strb	r3, [r7, #8]
	pGPIOx->pGPIOaddrx->OSPEEDR &= ~(0x3 << pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	689a      	ldr	r2, [r3, #8]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	791b      	ldrb	r3, [r3, #4]
 800046c:	4619      	mov	r1, r3
 800046e:	2303      	movs	r3, #3
 8000470:	408b      	lsls	r3, r1
 8000472:	43db      	mvns	r3, r3
 8000474:	4619      	mov	r1, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	400a      	ands	r2, r1
 800047c:	609a      	str	r2, [r3, #8]
	switch(speed)
 800047e:	7a3b      	ldrb	r3, [r7, #8]
 8000480:	2b03      	cmp	r3, #3
 8000482:	d84e      	bhi.n	8000522 <GPIO_init+0x292>
 8000484:	a201      	add	r2, pc, #4	; (adr r2, 800048c <GPIO_init+0x1fc>)
 8000486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800048a:	bf00      	nop
 800048c:	0800049d 	.word	0x0800049d
 8000490:	080004b7 	.word	0x080004b7
 8000494:	080004db 	.word	0x080004db
 8000498:	080004ff 	.word	0x080004ff
	{
			case GPIO_LOW_SPEED:
				regtemp =  GPIO_LOW_SPEED << (2 * pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
				pGPIOx->pGPIOaddrx->OSPEEDR |= regtemp;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	6899      	ldr	r1, [r3, #8]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	68fa      	ldr	r2, [r7, #12]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	609a      	str	r2, [r3, #8]
				regtemp = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
				break;
 80004b4:	e035      	b.n	8000522 <GPIO_init+0x292>
			case GPIO_MED_SPEED:
				regtemp =  GPIO_MED_SPEED << (2 * pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	2201      	movs	r2, #1
 80004be:	fa02 f303 	lsl.w	r3, r2, r3
 80004c2:	60fb      	str	r3, [r7, #12]
				pGPIOx->pGPIOaddrx->OSPEEDR |= regtemp;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6899      	ldr	r1, [r3, #8]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	609a      	str	r2, [r3, #8]
				regtemp = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
				break;
 80004d8:	e023      	b.n	8000522 <GPIO_init+0x292>
			case GPIO_FAST_SPEED:
				regtemp =  GPIO_FAST_SPEED << (2 * pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	2202      	movs	r2, #2
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	60fb      	str	r3, [r7, #12]
				pGPIOx->pGPIOaddrx->OSPEEDR |= regtemp;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	6899      	ldr	r1, [r3, #8]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	430a      	orrs	r2, r1
 80004f6:	609a      	str	r2, [r3, #8]
				regtemp = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
				break;
 80004fc:	e011      	b.n	8000522 <GPIO_init+0x292>
			case GPIO_HIGH_SPEED:
				regtemp =  GPIO_HIGH_SPEED << (2 * pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	2203      	movs	r2, #3
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	60fb      	str	r3, [r7, #12]
				pGPIOx->pGPIOaddrx->OSPEEDR |= regtemp;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6899      	ldr	r1, [r3, #8]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	430a      	orrs	r2, r1
 800051a:	609a      	str	r2, [r3, #8]
				regtemp = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
				break;
 8000520:	bf00      	nop
	}
	//configure the pushpull configuration
	regtemp =  pGPIOx->GPIOpinconfig.GPIO_pinpupdcontrol << (2 * pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7a1b      	ldrb	r3, [r3, #8]
 8000526:	461a      	mov	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	fa02 f303 	lsl.w	r3, r2, r3
 8000532:	60fb      	str	r3, [r7, #12]
	pGPIOx->pGPIOaddrx->PUPDR &= ~(0xF << pGPIOx->GPIOpinconfig.GPIO_pinnumber);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	68da      	ldr	r2, [r3, #12]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	4619      	mov	r1, r3
 8000540:	230f      	movs	r3, #15
 8000542:	408b      	lsls	r3, r1
 8000544:	43db      	mvns	r3, r3
 8000546:	4619      	mov	r1, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	400a      	ands	r2, r1
 800054e:	60da      	str	r2, [r3, #12]
	pGPIOx->pGPIOaddrx->PUPDR |= regtemp;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68d9      	ldr	r1, [r3, #12]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	430a      	orrs	r2, r1
 800055e:	60da      	str	r2, [r3, #12]
	regtemp = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <GPIO_clock_control>:
void GPIO_clock_control(GPIO_regdef_t *pGPIOx, gpio_enum status)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
	if(status == CLK_SET)
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d160      	bne.n	8000644 <GPIO_clock_control+0xd4>
	{
		if(pGPIOx == GPIOA_ADDR)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a64      	ldr	r2, [pc, #400]	; (8000718 <GPIO_clock_control+0x1a8>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d107      	bne.n	800059a <GPIO_clock_control+0x2a>
			GPIOA_PCLK_EN();
 800058a:	4b64      	ldr	r3, [pc, #400]	; (800071c <GPIO_clock_control+0x1ac>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000590:	4b62      	ldr	r3, [pc, #392]	; (800071c <GPIO_clock_control+0x1ac>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f042 0201 	orr.w	r2, r2, #1
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOB_ADDR)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a60      	ldr	r2, [pc, #384]	; (8000720 <GPIO_clock_control+0x1b0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d107      	bne.n	80005b2 <GPIO_clock_control+0x42>
			GPIOB_PCLK_EN();
 80005a2:	4b5e      	ldr	r3, [pc, #376]	; (800071c <GPIO_clock_control+0x1ac>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a8:	4b5c      	ldr	r3, [pc, #368]	; (800071c <GPIO_clock_control+0x1ac>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f042 0202 	orr.w	r2, r2, #2
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOC_ADDR)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a5b      	ldr	r2, [pc, #364]	; (8000724 <GPIO_clock_control+0x1b4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d107      	bne.n	80005ca <GPIO_clock_control+0x5a>
			GPIOC_PCLK_EN();
 80005ba:	4b58      	ldr	r3, [pc, #352]	; (800071c <GPIO_clock_control+0x1ac>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c0:	4b56      	ldr	r3, [pc, #344]	; (800071c <GPIO_clock_control+0x1ac>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f042 0204 	orr.w	r2, r2, #4
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOD_ADDR)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a56      	ldr	r2, [pc, #344]	; (8000728 <GPIO_clock_control+0x1b8>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d107      	bne.n	80005e2 <GPIO_clock_control+0x72>
			GPIOD_PCLK_EN();
 80005d2:	4b52      	ldr	r3, [pc, #328]	; (800071c <GPIO_clock_control+0x1ac>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d8:	4b50      	ldr	r3, [pc, #320]	; (800071c <GPIO_clock_control+0x1ac>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f042 0208 	orr.w	r2, r2, #8
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOE_ADDR)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a51      	ldr	r2, [pc, #324]	; (800072c <GPIO_clock_control+0x1bc>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d107      	bne.n	80005fa <GPIO_clock_control+0x8a>
			GPIOE_PCLK_EN();
 80005ea:	4b4c      	ldr	r3, [pc, #304]	; (800071c <GPIO_clock_control+0x1ac>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f0:	4b4a      	ldr	r3, [pc, #296]	; (800071c <GPIO_clock_control+0x1ac>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f042 0210 	orr.w	r2, r2, #16
 80005f8:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOF_ADDR)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a4c      	ldr	r2, [pc, #304]	; (8000730 <GPIO_clock_control+0x1c0>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d107      	bne.n	8000612 <GPIO_clock_control+0xa2>
			GPIOF_PCLK_EN();
 8000602:	4b46      	ldr	r3, [pc, #280]	; (800071c <GPIO_clock_control+0x1ac>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000608:	4b44      	ldr	r3, [pc, #272]	; (800071c <GPIO_clock_control+0x1ac>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f042 0220 	orr.w	r2, r2, #32
 8000610:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOG_ADDR)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a47      	ldr	r2, [pc, #284]	; (8000734 <GPIO_clock_control+0x1c4>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d107      	bne.n	800062a <GPIO_clock_control+0xba>
			GPIOG_PCLK_EN();
 800061a:	4b40      	ldr	r3, [pc, #256]	; (800071c <GPIO_clock_control+0x1ac>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000620:	4b3e      	ldr	r3, [pc, #248]	; (800071c <GPIO_clock_control+0x1ac>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOH_ADDR)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a42      	ldr	r2, [pc, #264]	; (8000738 <GPIO_clock_control+0x1c8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d16b      	bne.n	800070a <GPIO_clock_control+0x19a>
			GPIOH_PCLK_EN();
 8000632:	4b3a      	ldr	r3, [pc, #232]	; (800071c <GPIO_clock_control+0x1ac>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000638:	4b38      	ldr	r3, [pc, #224]	; (800071c <GPIO_clock_control+0x1ac>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000640:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOG_ADDR)
			GPIOG_PCLK_DI();
		if(pGPIOx == GPIOH_ADDR)
			GPIOH_PCLK_DI();
	}
}
 8000642:	e062      	b.n	800070a <GPIO_clock_control+0x19a>
	else if(status == CLK_RESET)
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d15f      	bne.n	800070a <GPIO_clock_control+0x19a>
		if(pGPIOx == GPIOA_ADDR)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a32      	ldr	r2, [pc, #200]	; (8000718 <GPIO_clock_control+0x1a8>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d107      	bne.n	8000662 <GPIO_clock_control+0xf2>
			GPIOA_PCLK_DI();
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <GPIO_clock_control+0x1ac>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <GPIO_clock_control+0x1ac>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f022 0201 	bic.w	r2, r2, #1
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOB_ADDR)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a2e      	ldr	r2, [pc, #184]	; (8000720 <GPIO_clock_control+0x1b0>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d107      	bne.n	800067a <GPIO_clock_control+0x10a>
			GPIOB_PCLK_DI();
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <GPIO_clock_control+0x1ac>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <GPIO_clock_control+0x1ac>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f022 0202 	bic.w	r2, r2, #2
 8000678:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOC_ADDR)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a29      	ldr	r2, [pc, #164]	; (8000724 <GPIO_clock_control+0x1b4>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d107      	bne.n	8000692 <GPIO_clock_control+0x122>
			GPIOC_PCLK_DI();
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <GPIO_clock_control+0x1ac>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <GPIO_clock_control+0x1ac>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f022 0204 	bic.w	r2, r2, #4
 8000690:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOD_ADDR)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a24      	ldr	r2, [pc, #144]	; (8000728 <GPIO_clock_control+0x1b8>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d107      	bne.n	80006aa <GPIO_clock_control+0x13a>
			GPIOD_PCLK_DI();
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <GPIO_clock_control+0x1ac>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <GPIO_clock_control+0x1ac>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f022 0208 	bic.w	r2, r2, #8
 80006a8:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOE_ADDR)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a1f      	ldr	r2, [pc, #124]	; (800072c <GPIO_clock_control+0x1bc>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d107      	bne.n	80006c2 <GPIO_clock_control+0x152>
			GPIOE_PCLK_DI();
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <GPIO_clock_control+0x1ac>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <GPIO_clock_control+0x1ac>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f022 0210 	bic.w	r2, r2, #16
 80006c0:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOF_ADDR)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <GPIO_clock_control+0x1c0>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d107      	bne.n	80006da <GPIO_clock_control+0x16a>
			GPIOF_PCLK_DI();
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <GPIO_clock_control+0x1ac>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <GPIO_clock_control+0x1ac>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f022 0220 	bic.w	r2, r2, #32
 80006d8:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOG_ADDR)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a15      	ldr	r2, [pc, #84]	; (8000734 <GPIO_clock_control+0x1c4>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d107      	bne.n	80006f2 <GPIO_clock_control+0x182>
			GPIOG_PCLK_DI();
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <GPIO_clock_control+0x1ac>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <GPIO_clock_control+0x1ac>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == GPIOH_ADDR)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a10      	ldr	r2, [pc, #64]	; (8000738 <GPIO_clock_control+0x1c8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d107      	bne.n	800070a <GPIO_clock_control+0x19a>
			GPIOH_PCLK_DI();
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <GPIO_clock_control+0x1ac>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <GPIO_clock_control+0x1ac>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000708:	631a      	str	r2, [r3, #48]	; 0x30
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40020000 	.word	0x40020000
 800071c:	20000000 	.word	0x20000000
 8000720:	40020400 	.word	0x40020400
 8000724:	40020800 	.word	0x40020800
 8000728:	40020c00 	.word	0x40020c00
 800072c:	40021000 	.word	0x40021000
 8000730:	40021400 	.word	0x40021400
 8000734:	40021800 	.word	0x40021800
 8000738:	40021c00 	.word	0x40021c00

0800073c <GPIO_toggle_pin>:
{
	uint16_t readport = (uint16_t)(pGPIOhandle->IDR);
	return readport;
}
void GPIO_toggle_pin(GPIO_regdef_t *pGPIOtogglehandle ,uint8_t pinnumber)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	uint8_t readpinvalue = (uint8_t)((pGPIOtogglehandle->IDR >> pinnumber) & 0x01);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	fa22 f303 	lsr.w	r3, r2, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
	uint8_t togglepin = 1 << pinnumber;
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2201      	movs	r2, #1
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	73bb      	strb	r3, [r7, #14]
	if(readpinvalue == 1)
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d107      	bne.n	800077a <GPIO_toggle_pin+0x3e>
		pGPIOtogglehandle->ODR &= ~togglepin;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	7bba      	ldrb	r2, [r7, #14]
 8000770:	43d2      	mvns	r2, r2
 8000772:	401a      	ands	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	615a      	str	r2, [r3, #20]
	else
		pGPIOtogglehandle->ODR |= togglepin;

}
 8000778:	e005      	b.n	8000786 <GPIO_toggle_pin+0x4a>
		pGPIOtogglehandle->ODR |= togglepin;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	695a      	ldr	r2, [r3, #20]
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	431a      	orrs	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	615a      	str	r2, [r3, #20]
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <gpio_config>:
void GPIO_write_output_port(GPIO_regdef_t *pGPIOhandle, uint16_t portvalue)
{
	pGPIOhandle->ODR = portvalue;
}
GPIO_regdef_t *gpio_config(GPIO_regdef_t *port , uint8_t mode , uint8_t pinnumber, uint8_t output_mode_type , uint8_t pullup ,uint8_t speed)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	4608      	mov	r0, r1
 800079c:	4611      	mov	r1, r2
 800079e:	461a      	mov	r2, r3
 80007a0:	4603      	mov	r3, r0
 80007a2:	70fb      	strb	r3, [r7, #3]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70bb      	strb	r3, [r7, #2]
 80007a8:	4613      	mov	r3, r2
 80007aa:	707b      	strb	r3, [r7, #1]

	GPIO_handle_t GPIO_handle;
	GPIO_handle.pGPIOaddrx = port;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	60fb      	str	r3, [r7, #12]
	GPIO_handle.GPIOpinconfig.GPIO_mode = mode;
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	747b      	strb	r3, [r7, #17]
	GPIO_handle.GPIOpinconfig.GPIO_pinnumber = pinnumber;
 80007b4:	78bb      	ldrb	r3, [r7, #2]
 80007b6:	743b      	strb	r3, [r7, #16]
	GPIO_handle.GPIOpinconfig.GPIO_pinpupdcontrol = pullup;
 80007b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007bc:	753b      	strb	r3, [r7, #20]
	if(GPIO_handle.GPIOpinconfig.GPIO_mode == GPIO_MODE_OP && output_mode_type != -1)
 80007be:	7c7b      	ldrb	r3, [r7, #17]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d104      	bne.n	80007ce <gpio_config+0x3c>
	{
		GPIO_handle.GPIOpinconfig.GPIO_pinspeed =  speed;
 80007c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007c8:	74bb      	strb	r3, [r7, #18]
		GPIO_handle.GPIOpinconfig.GPIO_pinoptype = output_mode_type;
 80007ca:	787b      	ldrb	r3, [r7, #1]
 80007cc:	74fb      	strb	r3, [r7, #19]
	}
	GPIO_init(&GPIO_handle);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fd5c 	bl	8000290 <GPIO_init>
	return port;
 80007d8:	687b      	ldr	r3, [r7, #4]

}
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <delay>:

RCC_regdef_t *pRCC = (RCC_regdef_t *)RCC_ADDR;


void delay(unsigned long int sec_delay)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b085      	sub	sp, #20
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
	sec_delay = sec_delay * 10000;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80007f0:	fb02 f303 	mul.w	r3, r2, r3
 80007f4:	607b      	str	r3, [r7, #4]
	for(uint32_t i = 0; i< sec_delay; i++);
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e002      	b.n	8000802 <delay+0x20>
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d3f8      	bcc.n	80007fc <delay+0x1a>
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <__libc_init_array>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	4e0d      	ldr	r6, [pc, #52]	; (8000850 <__libc_init_array+0x38>)
 800081c:	4c0d      	ldr	r4, [pc, #52]	; (8000854 <__libc_init_array+0x3c>)
 800081e:	1ba4      	subs	r4, r4, r6
 8000820:	10a4      	asrs	r4, r4, #2
 8000822:	2500      	movs	r5, #0
 8000824:	42a5      	cmp	r5, r4
 8000826:	d109      	bne.n	800083c <__libc_init_array+0x24>
 8000828:	4e0b      	ldr	r6, [pc, #44]	; (8000858 <__libc_init_array+0x40>)
 800082a:	4c0c      	ldr	r4, [pc, #48]	; (800085c <__libc_init_array+0x44>)
 800082c:	f000 f818 	bl	8000860 <_init>
 8000830:	1ba4      	subs	r4, r4, r6
 8000832:	10a4      	asrs	r4, r4, #2
 8000834:	2500      	movs	r5, #0
 8000836:	42a5      	cmp	r5, r4
 8000838:	d105      	bne.n	8000846 <__libc_init_array+0x2e>
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000840:	4798      	blx	r3
 8000842:	3501      	adds	r5, #1
 8000844:	e7ee      	b.n	8000824 <__libc_init_array+0xc>
 8000846:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800084a:	4798      	blx	r3
 800084c:	3501      	adds	r5, #1
 800084e:	e7f2      	b.n	8000836 <__libc_init_array+0x1e>
 8000850:	08000878 	.word	0x08000878
 8000854:	08000878 	.word	0x08000878
 8000858:	08000878 	.word	0x08000878
 800085c:	0800087c 	.word	0x0800087c

08000860 <_init>:
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000862:	bf00      	nop
 8000864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000866:	bc08      	pop	{r3}
 8000868:	469e      	mov	lr, r3
 800086a:	4770      	bx	lr

0800086c <_fini>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	bf00      	nop
 8000870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000872:	bc08      	pop	{r3}
 8000874:	469e      	mov	lr, r3
 8000876:	4770      	bx	lr
